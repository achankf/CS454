Slide 1

layers
- platform
- middleware
- applications

advantage of server/client
- more efficient division of labor
- horizontal and vertical scaling of resources
- better price/performance on client machines
- ability to use familiar tools on client machine
- client access to remote data (via standards)
- full DBMS functionality provided to client workstation

problems with > 1 client and 1 server
- server forms bottleneck, single point of failure, scaling difficult

think client
- run GUI on client while application execute on a possibly remote server

remote procedure call
- caller makes a procedure call; if it's a local procedure, then handle it normally; otherwise, handle it as a remote procedure

object management architecture
- object-oriented
- common object request broker (CORBA) - middleware

design requirement of distributed systems
- performance
	- distribution - opportunities for parallelism
	- scalability
	- avoid bottlenect
	- difference b/w bandwidth and latency
	- caching and replication
- quality of service
	- functional
	- non-functional: performance, reliability, availability
- dependability
	- reliability
		- measurement of success with which a system conforms to some functional requirements
		- probability of non-failure
	- availability
		- fraction of time that a system meets its specs
		- probability that system is operational in a given period
- security
	- communication, distributed resources, infrastructure attacks
	- unauthorized usage
	- problems: threats to processes and communication channels, denial of service attacks
	- issues: privacy, authentication, availability, integrity

redundancy
- hardware
- software
	- multiple processes: one dies, the other takeover
	- data: transactional

Slide 2

protocol - defines format and ordering of messages

OSI model
- applicaiton - support network application; FTP, HTTP, etc.
- presentation
- session
- transport - host to host data transfer; TCP, UDP
- network - routing; IP
- data link - data transfer b/w neighbouring network element; X.25, Ethernet, packet radio, etc.
- physical - bits "on the wire"

- message format: stack-based, physical...application then the data

TCP
- connection-oriented
- reliable transport
- flow control
- congestion control
- doesn't provide timing, bandwidth guarantee

UDP
- unreliable data transfer
- doesn't provide connection setup, reliability, flow control, timing, or bandwidth guarantee

IP address classes
A	0   - 127   0
B	128 – 191	10
C	192 – 223	110
D	224 – 239	1110
E	240 – 254   1111

data transfer
- circuit switching
	- dedicate circuit per call
	- no resource sharing
	- call setup required
	- guaranteed performance
	- resource division - frequency vs time
- packet switching
	- data sent through discrete chunks
	- end-to-end data stream divided into packets
	- resource contention (i.e. congestion)
	- store and forward - packet move one hop at a time
	- delays - nodal processing, queuing, transmission delay, propagation delay

message switching

routing
- datagram network - destination address determines next hop (i.e asking for direction)
- virtual circuit - each packet carries tag, which determines next hop; fixed path

Slide 3

- RPC - extension of the conventional procedure call model
- RMI - remote method invocation; object-oriented; allows object in one process to invoke an object's method in another process
- message based communication - send/receive; non-blocking; receiver doesn't need to be running

data transmission format
- canonical form
- versioning: first byte indicates the format

RPC failures
- client unable to locate server - solution: error code
- request packets are lost - check for acknowledgement and have a timer
- reply packets are lost - timer
- server crashes after receiving packets
	- wait until server reboot and check status
	- give up immediately and report failure
	- client gets no help (easy)
- client crashes after sending packets
	- extermination - keep of log and kill orphans after client reboots
	- reincarnation - divide time into epoches; when client reboot mark a new epoch and kill orphans
	- gentle reincarnation - when broadcast comes in, kill orphans that don't have an owner
	- expiration - timeout

RPC stubs
- generated by compilers

dynamic binding
- separate process called "binder" which provides the following methods
	- register - {name, version, handle, unique id} -> ()
	- deregister - {name, version, unique id} -> ()
	- look up - {name, version} -> {handle, unique id}
- advantages:
	- flexible
	- support multiple servers that support the same interface
	- binder can verify both client and server use the same interface
- disadvantages:
	- overhead
	- bottlenect for large systems

distributed object management
- RMI
- additional complications
- good model
- modules
	- communication module
	- remote reference module

message-based communication
- send/receive
- synchronous - store message in receiving host's local buffer or delivered to the receiver
- asynchronous - sender continues immediately after a send; store in receiving host's local buffer or at the first communication server
- transient - "if not delivered = lost"
- persistent - store in the communication system until message is delivered
